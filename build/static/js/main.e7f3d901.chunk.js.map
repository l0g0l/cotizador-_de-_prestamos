{"version":3,"sources":["Components/Form.js","helpers/helpers.js","Components/Header.js","Components/Mensaje.js","Components/Resultado.js","Components/Spinner/Spinner.js","App.js","index.js"],"names":["Form","props","cantidad","setcantidad","plazo","setplazo","settotal","setcargando","useState","error","setError","onSubmit","e","preventDefault","setTimeout","total","totalCantidad","console","log","totalPLazo","calcutlarTotal","className","type","placeholder","onChange","parseInt","target","value","Header","titulo","Mensaje","Resultado","toFixed","Spinner","App","componente","setCantidad","setPlazo","setTotal","cargando","setCargando","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7f3d901.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport { calcutlarTotal } from '../helpers/helpers'\n\n// Cuando las props cson muchas, el destructuring ya no queda bien, le pasamos props y creamos una variable dentro con las props en destructuring\nconst Form = (props) => {\n\n    const { cantidad, setcantidad, plazo, setplazo, settotal, setcargando } = props\n\n\n    //definir state para mensaje de error\n    const [error, setError] = useState(false)\n\n    const calcularPrestamo = (e) => {\n        e.preventDefault()\n\n        //validar\n        if (cantidad === 0 || plazo === '') {\n            setError(true)\n            return // con este return hacemos que no se ejecute la siguiente línea, es decir el quitar el mensaje de error, ya que solo quiero que se quite cuando el usuario haya rellenado correctamente los campos\n        }\n\n        //eliminamos el error\n        setError(false)\n\n        //habilitamos el spinner\n        setcargando(true)\n\n\n        setTimeout(() => {\n            //realizar la cotización\n            const total = calcutlarTotal(cantidad, plazo)\n\n            //una vez calculado guardamos en el state el total\n            settotal(total)\n\n            //deshabilitamos el spinner\n            setcargando(false)\n\n\n        }, 3000)\n    }\n\n\n    return (\n\n        <Fragment>\n            <form onSubmit={calcularPrestamo}>\n                <div className=\"row\">\n                    <div>\n                        <label>Cantidad Prestamo</label>\n                        <input\n                            className=\"u-full-width\"\n                            type=\"number\"\n                            placeholder=\"Ejemplo: 3000\"\n                            onChange={e => setcantidad(parseInt(e.target.value))} // como el valor del input lo recibimos en string, hay que cambiarlo a number. Para ahorrar código podemos poner la función directamente en el onChange\n                        />\n                    </div>\n                    <div>\n                        <label>Plazo para Pagar</label>\n                        <select\n                            className=\"u-full-width\"\n                            onChange={e => setplazo(parseInt(e.target.value))} // como el valor del input lo recibimos en string, hay que cambiarlo a number. Para ahorrar código podemos poner la función directamente en el onChange\n\n                        >\n                            <option value=\"\">Seleccionar</option>\n                            <option value=\"3\">3 meses</option>\n                            <option value=\"6\">6 meses</option>\n                            <option value=\"12\">12 meses</option>\n                            <option value=\"24\">24 meses</option>\n                        </select>\n                    </div>\n                    <div>\n                        <input\n                            type=\"submit\"\n                            value=\"Calcular\"\n                            className=\"button-primary u-full-width\"\n                        />\n                    </div>\n                </div>\n            </form>\n            {(error) ? <p className=\"error\">Todos los campos son obligatorios</p> : null}\n\n        </Fragment>\n    );\n}\n\nexport default Form;","// este archivo es un Helper, cuando tenemos funciones de muchas líneas, las creamos en archivos independientes y las exportamos para poderlas utilizar en todo nuestro código\n\nexport function calcutlarTotal(cantidad, plazo) {\n    /*  Cantidades\n     0-1000 = 25%\n     1001-5000 = 20%\n     5001-10000 = 15%\n     +10000= 10% */\n    let totalCantidad\n\n    if (cantidad <= 1000) {\n        totalCantidad = cantidad * .25\n\n    } else if (cantidad > 1000 && cantidad <= 5000) {\n\n        totalCantidad = cantidad * .20\n    } else if (cantidad > 5000 && cantidad <= 10000) {\n\n        totalCantidad = cantidad * .15\n    } else {\n\n        totalCantidad = cantidad * .10\n    }\n\n    console.log(totalCantidad)\n\n\n    /*  Calcular el plazo\n     3 = 5%\n     6 = 10%\n     12 = 15%\n     24 = 20%\n  */\n\n    let totalPLazo = 0\n\n    switch (plazo) {\n        case 3:\n            totalPLazo = cantidad * .05\n            break\n\n        case 6:\n            totalPLazo = cantidad * .10\n            break\n\n        case 12:\n            totalPLazo = cantidad * .15\n            break\n\n        case 24:\n            totalPLazo = cantidad * .20\n            break\n\n        default:\n            break\n    }\n    return totalPLazo + totalCantidad + cantidad\n\n}\n\n\n\n\n\n\n\n","import React from 'react'\n\n// en vez de props le puedes aplicar destruscturing. Con la arrow function,snipet scf, puedes quitar las llaves y el el return dejando los paréntesis SOLO CUANDO NO NECESITES ESCRBIR LÓGICA JS EN LA FUNCION, SEA SOLO PARA MOSTRAR y también se puede quitar el Fragment\n\nconst Header = ({ titulo }) => (\n    <h1>{titulo}</h1>\n\n);\n\n\nexport default Header;\n","import React from 'react'\n\nconst Mensaje = () => (\n  <p>Agrega una cantidad y plazo a pagar para cotizar</p>\n);\n\n\nexport default Mensaje;","import React from 'react'\n\n//.toFixed es para que solo se muestren 2 decimales\n\nconst Resultado = ({ total, plazo, cantidad }) => (\n    <div className=\"u-full-width resultado\">\n        <h2>Resumen</h2>\n        <p>La cantidad solicitada es: {cantidad}$</p>\n        <p>A pagar en: {plazo} meses</p>\n        <p>Su pago mensual es de: {(total / plazo).toFixed(2)}$</p>\n        <p>Total a pagar: {(total).toFixed(2)}$</p>\n\n    </div>\n\n);\n\n\nexport default Resultado;","import React from 'react'\nimport './spinner.css'\n\nconst Spinner = () => {\n  return (\n    <div className=\"sk-cube-grid\">\n      <div className=\"sk-cube sk-cube1\"></div>\n      <div className=\"sk-cube sk-cube2\"></div>\n      <div className=\"sk-cube sk-cube3\"></div>\n      <div className=\"sk-cube sk-cube4\"></div>\n      <div className=\"sk-cube sk-cube5\"></div>\n      <div className=\"sk-cube sk-cube6\"></div>\n      <div className=\"sk-cube sk-cube7\"></div>\n      <div className=\"sk-cube sk-cube8\"></div>\n      <div className=\"sk-cube sk-cube9\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;","import React, { Fragment, useState } from 'react'\nimport Form from './Components/Form'\nimport Header from './Components/Header'\nimport Mensaje from './Components/Mensaje'\nimport Resultado from './Components/Resultado'\nimport Spinner from './Components/Spinner/Spinner'\n\n\n\nfunction App() {\n\n\n  // definimos el state. Este state debería estar en Form, que es hijo de App, como no podemos sacer el state de allí hacia arriba, lo quitamos de Form y le ponemos el state al padre, a APP. Le pasamos por props al componente Form el state, para que pueda tener toda la info guardada. De este modo el state está en el componente padre y lo puede utilizar cualquier componente\n\n  const [cantidad, setCantidad] = useState(0)\n  const [plazo, setPlazo] = useState('')\n  const [total, setTotal] = useState(0)\n  const [cargando, setCargando] = useState(false)\n\n\n  //mostrar un componente u otro de manera condicional sin usar un ternario\n  let componente\n\n\n  if (cargando) {\n    componente = <Spinner />\n\n  } else if (total === 0) {\n    componente = <Mensaje />\n\n  } else {\n    componente = <Resultado\n      total={total}\n      plazo={plazo}\n      cantidad={cantidad} />\n  }\n\n\n  return (\n    <Fragment>\n      <Header\n        titulo=\"Cotizador de préstamos\" />\n\n      <div className=\"container\">\n        <Form\n          cantidad={cantidad}\n          setcantidad={setCantidad}\n          plazo={plazo}\n          setplazo={setPlazo}\n          settotal={setTotal}\n          setcargando={setCargando} />\n\n        <div className=\"mensajes\">\n          {componente}\n\n        </div>\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}